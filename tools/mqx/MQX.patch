diff -ruN ./CMakeLists.txt ../MQX/CMakeLists.txt
--- ./CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/CMakeLists.txt	2020-08-28 16:39:20.500000000 -0400
@@ -0,0 +1,5 @@
+ADD_SUBDIRECTORY(shell)
+ADD_SUBDIRECTORY(mfs)
+ADD_SUBDIRECTORY(mqx)
+ADD_SUBDIRECTORY(rtcs)
+ADD_SUBDIRECTORY(usb)
diff -ruN ./config/twrk64f120m/user_config.h ../MQX/config/twrk64f120m/user_config.h
--- ./config/twrk64f120m/user_config.h	2014-08-20 07:39:42.000000000 -0400
+++ ../MQX/config/twrk64f120m/user_config.h	2020-08-28 16:39:20.504000000 -0400
@@ -31,63 +31,90 @@
 
 
 /* MGCT: <generated_code> */
-#define BSPCFG_ENABLE_TTYA       0
-#define BSPCFG_ENABLE_ITTYA      0
-#define BSPCFG_ENABLE_TTYB       1
-#define BSPCFG_ENABLE_ITTYB      0
-#define BSPCFG_ENABLE_TTYC       0
-#define BSPCFG_ENABLE_ITTYC      0
-#define BSPCFG_ENABLE_TTYD       0
-#define BSPCFG_ENABLE_ITTYD      0
-#define BSPCFG_ENABLE_TTYE       0
-#define BSPCFG_ENABLE_ITTYE      0
-#define BSPCFG_ENABLE_TTYF       1
-#define BSPCFG_ENABLE_ITTYF      0
-#define BSPCFG_ENABLE_I2C0       1
-#define BSPCFG_ENABLE_II2C0      1
-#define BSPCFG_ENABLE_I2C1       0
-#define BSPCFG_ENABLE_II2C1      0
-#define BSPCFG_ENABLE_I2C2       0
-#define BSPCFG_ENABLE_II2C2      0
-#define BSPCFG_ENABLE_SPI0       0
-#define BSPCFG_ENABLE_SPI1       0
-#define BSPCFG_ENABLE_SPI2       0
-#define BSPCFG_ENABLE_RTCDEV     1
-#define BSPCFG_ENABLE_PCFLASH    0
-#define BSPCFG_ENABLE_ADC0       0
-#define BSPCFG_ENABLE_ADC1       1
-#define BSPCFG_ENABLE_FLASHX     0
-#define BSPCFG_ENABLE_ESDHC      1
-#define BSPCFG_ENABLE_IODEBUG    0
-#define BSPCFG_ENABLE_USBDCD     0
-
-/* Choose clock source for USB module */
-#define BSPCFG_USB_USE_IRC48M    0 /* Do not use internal referent clock source */
-
-#define BSPCFG_ENABLE_SAI        1
-#define BSPCFG_HAS_SRAM_POOL     1
-#define BSPCFG_ENET_SRAM_BUF     1
-
-#define MQX_USE_IDLE_TASK               1
-#define MQX_ENABLE_LOW_POWER            0
-#define MQXCFG_ENABLE_FP                1
-#define MQX_INCLUDE_FLOATING_POINT_IO   1
-
-#define RTCSCFG_ENABLE_ICMP      1
-#define RTCSCFG_ENABLE_UDP       1
-#define RTCSCFG_ENABLE_TCP       1
-#define RTCSCFG_ENABLE_STATS     1
-#define RTCSCFG_ENABLE_GATEWAYS  1
-#define FTPDCFG_USES_MFS         1
-#define RTCSCFG_ENABLE_SNMP      0
-
-#define TELNETDCFG_NOWAIT        FALSE
-
-#define MQX_TASK_DESTRUCTION     1
-
-#define HTTPDCFG_POLL_MODE       0
-#define HTTPDCFG_STATIC_TASKS    0
-#define HTTPDCFG_DYNAMIC_TASKS   1
+#define BSPCFG_ENET_SRAM_BUF                      1
+
+#define BSPCFG_ENABLE_I2C0                        1
+#define BSPCFG_ENABLE_I2C1                        0
+#define BSPCFG_ENABLE_I2C2                        0
+#define BSPCFG_ENABLE_II2C0                       1
+#define BSPCFG_ENABLE_II2C1                       0
+#define BSPCFG_ENABLE_II2C2                       0
+#define BSPCFG_ENABLE_RTCDEV                      1
+#define BSPCFG_ENABLE_PCFLASH                     0
+#define BSPCFG_ENABLE_SPI0                        0
+#define BSPCFG_ENABLE_SPI1                        0
+#define BSPCFG_ENABLE_SPI2                        0
+#define BSPCFG_ENABLE_ADC0                        0
+#define BSPCFG_ENABLE_ADC1                        1
+#define BSPCFG_ENABLE_FLASHX                      0
+#define BSPCFG_ENABLE_ESDHC                       1
+#define BSPCFG_ENABLE_USBDCD                      0
+#define BSPCFG_ENABLE_IODEBUG                     0
+#define BSPCFG_HAS_SRAM_POOL                      1
+
+/* Do not use internal referent clock source */
+#define BSPCFG_ENABLE_SAI                         1
+
+#define BSPCFG_ENABLE_TTYA                        0
+#define BSPCFG_ENABLE_ITTYA                       1
+
+#define BSPCFG_ENABLE_TTYB                        0
+#define BSPCFG_ENABLE_ITTYB                       1
+
+#define BSPCFG_ENABLE_TTYC                        0
+#define BSPCFG_ENABLE_ITTYC                       0
+
+#define BSPCFG_ENABLE_TTYD                        0
+#define BSPCFG_ENABLE_ITTYD                       1
+
+#define BSPCFG_ENABLE_TTYE                        0
+#define BSPCFG_ENABLE_ITTYE                       0
+
+#define BSPCFG_ENABLE_TTYF                        1
+#define BSPCFG_ENABLE_ITTYF                       0
+
+#define BSP_DEFAULT_MAX_MSGPOOLS                  (12L)
+#define BSP_DEFAULT_MAX_MSGQS                     (24L)
+#define BSP_DEFAULT_IO_CHANNEL                    "ttyf:"
+
+#define MQX_USE_IDLE_TASK                         1
+
+#define MQX_USE_TIMER                             1
+
+#define MQX_TASK_DESTRUCTION                      1
+
+#define MQXCFG_ENABLE_FP                          1
+#define MQX_INCLUDE_FLOATING_POINT_IO             1
+#define MQX_ENABLE_LOW_POWER                      0
+
+#define RTCSCFG_ENABLE_ICMP                       1
+#define RTCSCFG_ENABLE_IGMP                       1
+#define RTCSCFG_ENABLE_SNMP                       0
+#define RTCSCFG_ENABLE_UDP                        1
+#define RTCSCFG_ENABLE_TCP                        1
+#define RTCSCFG_ENABLE_STATS                      1
+#define RTCSCFG_ENABLE_GATEWAYS                   1
+
+#define RTCSCFG_PCBS_INIT                         15
+
+#define RTCSCFG_SOCKET_PART_INIT                  15
+
+#define RTCSCFG_MSGPOOL_INIT                      15
+#define RTCSCFG_MSGPOOL_GROW                      0
+
+#define RTCSCFG_IP_DISABLE_DIRECTED_BROADCAST     0
+#define RTCSCFG_UDP_ENABLE_LBOUND_MULTICAST       1
+
+#define RTCSCFG_STACK_SIZE                        (1000*sizeof(uint32_t))
+
+#define FTPDCFG_USES_MFS                          0
+#define FTPDCFG_ENABLE_MULTIPLE_CLIENTS           0
+#define FTPDCFG_ENABLE_USERNAME_AND_PASSWORD      0
+
+#define TELNETDCFG_NOWAIT                         FALSE
+#define TELNETDCFG_ENABLE_MULTIPLE_CLIENTS        0
+
+#define PPPHDLC_INIT                              1
 /* MGCT: </generated_code> */
 
 /*
diff -ruN ./mfs/CMakeLists.txt ../MQX/mfs/CMakeLists.txt
--- ./mfs/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/mfs/CMakeLists.txt	2020-08-28 16:39:20.504000000 -0400
@@ -0,0 +1,92 @@
+SET(LIBRARY_NAME mfs)
+
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mfs/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc/kadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/cm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/dma)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/macnet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/phy)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx/freescale)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/can/flexcan)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio/kgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/hwtimer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/common)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/debug)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_mem)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_null)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pipe)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lpm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb/mqxa)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pccard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcflash)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/rtc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/serial)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tchres)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/timer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/cpu)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/tad)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/compiler/gcc_arm/)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/arm-none-eabi/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include-fixed)
+
+
+SET(SOURCES
+   ${MQX_ROOTDIR}/mfs/source/generic/dir_read.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_attribute.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_cluster.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_create.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_data_sector.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_delete.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_dir_entry.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_directory.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_fat.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_format.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_handle.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_init.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_lfn.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_misc.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_open.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_parse.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_read.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_rename.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_rw.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_search.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_time.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_valdev.c
+   ${MQX_ROOTDIR}/mfs/source/generic/mfs_write.c
+   ${MQX_ROOTDIR}/mfs/source/generic/part_mgr.c)
+
+ADD_LIBRARY(${LIBRARY_NAME} STATIC ${SOURCES})
+
+ADD_CUSTOM_COMMAND(TARGET ${LIBRARY_NAME}
+   POST_BUILD
+   COMMAND ${MQX_ROOTDIR}/mfs/build/bat/mfs_twrk64f120m.sh ${MQX_ROOTDIR} ${MQX_ROOTDIR}/lib/twrk64f120m.cmake/debug/mfs gcc_arm
+   COMMENT "Copying mfs files")
diff -ruN ./mqx/CMakeLists.txt ../MQX/mqx/CMakeLists.txt
--- ./mqx/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/mqx/CMakeLists.txt	2020-08-28 16:39:20.504000000 -0400
@@ -0,0 +1,320 @@
+SET(BSP_LIBRARY_NAME bsp)
+SET(PSP_LIBRARY_NAME psp)
+
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc/kadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/cm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/dma)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/macnet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/phy)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx/freescale)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/can/flexcan)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio/kgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/hwtimer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/common)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/debug)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_mem)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_null)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pipe)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lpm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb/mqxa)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pccard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcflash)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/rtc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/serial)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tchres)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/timer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/cpu)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/compiler/gcc_arm/)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/tad)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/arm-none-eabi/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include-fixed)
+
+SET(BSP_SOURCES
+   ${MQX_ROOTDIR}/mqx/source/io/adc/kadc/adc_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/adc/kadc/adc_kadc.c
+   ${MQX_ROOTDIR}/mqx/source/io/adc/kadc/adt_kpdb.c
+   ${MQX_ROOTDIR}/mqx/source/io/adc/adc.c
+   ${MQX_ROOTDIR}/mqx/source/io/cm/cm.c
+   ${MQX_ROOTDIR}/mqx/source/io/dma/edma_kinetis.c
+   ${MQX_ROOTDIR}/mqx/source/io/dma/dma.c
+   ${MQX_ROOTDIR}/mqx/source/io/dma/edma.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/phy/phy_ksz8081.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_init.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_join.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_mii.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_receive.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_rejoin.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_send.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_stop.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_util.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/macnet/macnet_1588.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enaddr.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enclose.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enerr.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/eninit.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enjoin.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enleave.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enmediactl.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enopen.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enrecv.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/ensend.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enstat.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enstop.c
+   ${MQX_ROOTDIR}/mqx/source/io/enet/enutil.c
+   ${MQX_ROOTDIR}/mqx/source/io/esdhc/esdhc_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/esdhc/esdhc.c
+   ${MQX_ROOTDIR}/mqx/source/io/flashx/freescale/flash_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/flashx/freescale/flash_ftfe.c
+   ${MQX_ROOTDIR}/mqx/source/io/flashx/flashx.c
+   ${MQX_ROOTDIR}/mqx/source/io/can/flexcan/flexcan_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/can/flexcan/kflexcan.c
+   ${MQX_ROOTDIR}/mqx/source/io/can/flexcan/kflexcan_int.c
+   ${MQX_ROOTDIR}/mqx/source/io/gpio/kgpio/io_gpio_kgpio.c
+   ${MQX_ROOTDIR}/mqx/source/io/gpio/io_gpio.c
+   ${MQX_ROOTDIR}/mqx/source/io/hwtimer/hwtimer_lpt.c
+   ${MQX_ROOTDIR}/mqx/source/io/hwtimer/hwtimer_kinetis.c
+   ${MQX_ROOTDIR}/mqx/source/io/hwtimer/hwtimer_systick.c
+   ${MQX_ROOTDIR}/mqx/source/io/hwtimer/hwtimer_pit.c
+   ${MQX_ROOTDIR}/mqx/source/io/hwtimer/hwtimer.c
+   ${MQX_ROOTDIR}/mqx/source/io/i2c/i2c_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/i2c/polled/i2c_pol_ki2c.c
+   ${MQX_ROOTDIR}/mqx/source/io/i2c/int/i2c_int_ki2c.c
+   ${MQX_ROOTDIR}/mqx/source/io/i2c/polled/i2c_pol.c
+   ${MQX_ROOTDIR}/mqx/source/io/i2c/int/i2c_int.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/bsp_cm.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_adc.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_cfcard.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_enet.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_esdhc.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_flashx.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_gpio.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_hw.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_i2c.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_iodebug.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_lwadc.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_lpm.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_sai.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_sci.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_sdcard.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_spi.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_tchres.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_usb_dcd.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_usb.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_dma.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/init_bsp.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/mqx_init.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/mqx_main.c
+   ${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m/vectors.c
+   ${MQX_ROOTDIR}/mqx/source/io/debug/iodebug.c
+   ${MQX_ROOTDIR}/mqx/source/io/debug/iodebug_asm.S
+   ${MQX_ROOTDIR}/mqx/source/io/io_mem/io_mem.c
+   ${MQX_ROOTDIR}/mqx/source/io/io_null/io_null.c
+   ${MQX_ROOTDIR}/mqx/source/io/pipe/io_pipe.c
+   ${MQX_ROOTDIR}/mqx/source/io/lpm/lpm_smc.c
+   ${MQX_ROOTDIR}/mqx/source/io/lpm/lpm.c
+   ${MQX_ROOTDIR}/mqx/source/io/lwadc/lwadc_k64.c
+   ${MQX_ROOTDIR}/mqx/source/io/lwadc/lwadc_kadc.c
+   ${MQX_ROOTDIR}/mqx/source/io/lwgpio/lwgpio_kgpio.c
+   ${MQX_ROOTDIR}/mqx/source/io/lwgpio/lwgpio.c
+   ${MQX_ROOTDIR}/mqx/source/io/pcb/io_pcb2.c
+   ${MQX_ROOTDIR}/mqx/source/io/pcb/io_pcb.c
+   ${MQX_ROOTDIR}/mqx/source/io/pcb/iop_inst.c
+   ${MQX_ROOTDIR}/mqx/source/io/pcb/mqxa/pcb_mqxa.c
+   ${MQX_ROOTDIR}/mqx/source/io/pccard/pccardflexbus.c
+   ${MQX_ROOTDIR}/mqx/source/io/pcflash/apcflash.c
+   ${MQX_ROOTDIR}/mqx/source/io/rtc/krtc.c
+   ${MQX_ROOTDIR}/mqx/source/io/sai/sai_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/sai/int/sai_int_ksai.c
+   ${MQX_ROOTDIR}/mqx/source/io/sai/dma/sai_dma_ksai.c
+   ${MQX_ROOTDIR}/mqx/source/io/sai/int/sai_int.c
+   ${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_esdhc/sdcard_esdhc.c
+   ${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_spi/sdcard_spi.c
+   ${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard.c
+   ${MQX_ROOTDIR}/mqx/source/io/serial/serl_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/serial/int/serl_int_kuart.c
+   ${MQX_ROOTDIR}/mqx/source/io/serial/polled/serl_pol_kuart.c
+   ${MQX_ROOTDIR}/mqx/source/io/serial/dma/serl_dma_kuart.c
+   ${MQX_ROOTDIR}/mqx/source/io/serial/io_sinit.c
+   ${MQX_ROOTDIR}/mqx/source/io/serial/polled/serl_pol.c
+   ${MQX_ROOTDIR}/mqx/source/io/serial/int/serl_int.c
+   ${MQX_ROOTDIR}/mqx/source/io/spi/spi_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/spi/spi_dspi_dma.c
+   ${MQX_ROOTDIR}/mqx/source/io/spi/spi_dspi_common.c
+   ${MQX_ROOTDIR}/mqx/source/io/spi/spi.c
+   ${MQX_ROOTDIR}/mqx/source/io/spi/spi_dspi.c
+   ${MQX_ROOTDIR}/mqx/source/io/spi/spi_dspi_common.c
+   ${MQX_ROOTDIR}/mqx/source/io/tchres/tchres.c
+   ${MQX_ROOTDIR}/mqx/source/io/tfs/tfs.c
+   ${MQX_ROOTDIR}/mqx/source/io/timer/timer_qpit.c
+   ${MQX_ROOTDIR}/mqx/source/io/timer/timer_kinetis.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb/usb_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb/usb_mk64_device.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb/usb_install.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb_dcd/usb_dcd_mk64.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled/usb_dcd_pol_kn.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int/usb_dcd_int_kn.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled/usb_dcd_pol.c
+   ${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int/usb_dcd_int.c)
+
+SET(PSP_SOURCES
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/kinetis_mpu.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4/boot.S
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4/dispatch.S
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4/support.S
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/int_gkis.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/int_inst.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/int_kisr.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/int_pvta.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/int_unx.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/int_vtab.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/int_xcpt.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/ipsum.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/mem_copy.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/mem_zero.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_dati.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_gelms.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_hoti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_iinit.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_mat1.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_mat2.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_mat3.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_miti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_msti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_mstiq.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_nsti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_psti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_seti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_supp.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tiad.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tida.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tihr.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_timn.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tims.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tinm.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tins.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tiol.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tipr.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tips.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tise.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tisu.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tius.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_tkti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/psp_usti.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/sc_irdyq.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/stack_bu.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/stack_de.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/stack_st.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/cortex.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/nvic.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/event.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_clre.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_dopr.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fclos.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_feof.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_ferr.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fflsh.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fgetc.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fgetl.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fgets.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fopen.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fp.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fprt.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fputc.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fputs.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fscan.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fseek.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fstat.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_ftell.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_fung.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_ioctl.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_misc.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_pntf.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_read.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_scanf.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_scanl.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_spr.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_sscan.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_util.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_vpr.c
+   ${MQX_ROOTDIR}/mqx/source/fio/io_write.c
+   ${MQX_ROOTDIR}/mqx/source/io/io_init.c
+   ${MQX_ROOTDIR}/mqx/source/io/io_inst.c
+   ${MQX_ROOTDIR}/mqx/source/io/io_instx.c
+   ${MQX_ROOTDIR}/mqx/source/io/io_ghand.c
+   ${MQX_ROOTDIR}/mqx/source/io/io_shand.c
+   ${MQX_ROOTDIR}/mqx/source/io/io_uinst.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/ipc.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/idletask.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/inittask.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/int.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/lwsem.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/mem.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/mqx.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/sched.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/task.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/time.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/taskq.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/klog.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/log.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/lwevent.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/lwlog.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/lwmem.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/lwmsgq.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/lwtimer.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/msg.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/msgq.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/msgpool.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/mutex.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/name.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/partition.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/queue.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/sem.c
+   ${MQX_ROOTDIR}/mqx/source/string/strnlen.c
+   ${MQX_ROOTDIR}/mqx/source/string/str_utos.c
+   ${MQX_ROOTDIR}/mqx/source/string/unicode.c
+   ${MQX_ROOTDIR}/mqx/source/tad/tad.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/timer.c
+   ${MQX_ROOTDIR}/mqx/source/kernel/watchdog.c
+   ${MQX_ROOTDIR}/mqx/source/psp/cortex_m/compiler/gcc_arm/comp.c)
+
+ADD_LIBRARY(${BSP_LIBRARY_NAME} STATIC ${BSP_SOURCES})
+ADD_LIBRARY(${PSP_LIBRARY_NAME} STATIC ${PSP_SOURCES})
+
+ADD_CUSTOM_COMMAND(TARGET ${BSP_LIBRARY_NAME}
+   POST_BUILD
+   COMMAND ${MQX_ROOTDIR}/mqx/build/bat/bsp_twrk64f120m.sh ${MQX_ROOTDIR} ${MQX_ROOTDIR}/lib/twrk64f120m.cmake/debug/bsp gcc_arm
+   COMMENT "Copying bsp files")
+
+ADD_CUSTOM_COMMAND(TARGET ${PSP_LIBRARY_NAME}
+   POST_BUILD
+   COMMAND ${MQX_ROOTDIR}/mqx/build/bat/psp_twrk64f120m.sh ${MQX_ROOTDIR} ${MQX_ROOTDIR}/lib/twrk64f120m.cmake/debug/psp gcc_arm
+   COMMENT "Copying psp files")
diff -ruN ./mqx/source/bsp/twrk64f120m/gcc_arm/intflash.ld ../MQX/mqx/source/bsp/twrk64f120m/gcc_arm/intflash.ld
--- ./mqx/source/bsp/twrk64f120m/gcc_arm/intflash.ld	2014-08-20 07:39:42.000000000 -0400
+++ ../MQX/mqx/source/bsp/twrk64f120m/gcc_arm/intflash.ld	2020-08-28 16:39:20.524000000 -0400
@@ -12,7 +12,7 @@
 {
     vectorrom   (RX): ORIGIN = 0x00000000, LENGTH = 0x00000400
     cfmprotrom  (R): ORIGIN = 0x00000400, LENGTH = 0x00000020
-    rom         (RX): ORIGIN = 0x00000420, LENGTH = 0x000FFBE0  /* Code + Const data */
+    rom         (RX): ORIGIN = 0x00000420, LENGTH = 0x0007FBE0  /* Code + Const data */
     ram         (RW): ORIGIN = 0x1FFF0000, LENGTH = 0x00040000  /* SRAM - RW data */
     
     /* kernel space starts after RAM variables (Location of MQX Kernel data + MQX heap) */
@@ -28,7 +28,7 @@
 {
     __INTERNAL_SRAM_BASE  = 0x1FFF0000;
     __INTERNAL_SRAM_SIZE  = 0x00040000;
-    __SRAM_POOL = 0x2000FFF0;
+    __SRAM_POOL = 0x2002FFF0;
 
     __INTERNAL_FLASH_BASE = 0x00000000;
     __INTERNAL_FLASH_SIZE = 0x00100000;
diff -ruN ./mqx/source/bsp/twrk64f120m/init_enet.c ../MQX/mqx/source/bsp/twrk64f120m/init_enet.c
--- ./mqx/source/bsp/twrk64f120m/init_enet.c	2014-08-20 07:39:42.000000000 -0400
+++ ../MQX/mqx/source/bsp/twrk64f120m/init_enet.c	2020-08-28 16:39:20.524000000 -0400
@@ -30,7 +30,7 @@
 #include "enet.h"
 #include "enetprv.h"
 #include <macnet_prv.h>          
-#include "phy_ksz8041.h"
+#include "phy_ksz8081.h"
 
 
 const MACNET_INIT_STRUCT MACNET_device[MACNET_DEVICE_COUNT] =  {
@@ -40,7 +40,7 @@
 
 const ENET_IF_STRUCT ENET_0 = {
     &MACNET_IF,
-    &phy_ksz8041_IF,
+    &phy_ksz8081_IF,
     MACNET_DEVICE_0,
     MACNET_DEVICE_0,
     BSP_ENET0_PHY_ADDR,
diff -ruN ./mqx/source/bsp/twrk64f120m/init_gpio.c ../MQX/mqx/source/bsp/twrk64f120m/init_gpio.c
--- ./mqx/source/bsp/twrk64f120m/init_gpio.c	2014-08-20 07:39:42.000000000 -0400
+++ ../MQX/mqx/source/bsp/twrk64f120m/init_gpio.c	2020-08-28 16:39:20.524000000 -0400
@@ -52,20 +52,20 @@
     switch (dev_num)
     {
         case 0:
-            pctl = (PORT_MemMapPtr)PORTA_BASE_PTR;
+            pctl = (PORT_MemMapPtr)PORTB_BASE_PTR;
             if (flags & IO_PERIPHERAL_PIN_MUX_ENABLE)
             {
-                /* PTA1 as RX function (Alt.3) + drive strength */
-                pctl->PCR[14] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
-                /* PTA2 as TX function (Alt.3) + drive strength */
-                pctl->PCR[15] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
+                /* PTB16 as RX function (Alt.3) + drive strength */
+                pctl->PCR[16] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
+                /* PTB17 as TX function (Alt.3) + drive strength */
+                pctl->PCR[17] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
             }
             if (flags & IO_PERIPHERAL_PIN_MUX_DISABLE)
             {
-                /* PTA1 default */
-                pctl->PCR[14] = 0;
-                /* PTA2 default */
-                pctl->PCR[15] = 0;
+                /* PTB16 default */
+                pctl->PCR[16] = 0;
+                /* PTB17 default */
+                pctl->PCR[17] = 0;
             }
             if (flags & IO_PERIPHERAL_CLOCK_ENABLE)
             {
@@ -759,7 +759,7 @@
     /* Enable USB-OTG IP clocking */
     SIM_SCGC4_REG(SIM_BASE_PTR) |= SIM_SCGC4_USBOTG_MASK;
     /* Enable IRC 48MHz for USB module */
-    USB0_CLK_RECOVER_IRC_EN = 0x03;
+    USB_CLK_RECOVER_IRC_EN = 0x03;
 #else
     /* Configure USB to be clocked from PLL */
     SIM_SOPT2_REG(SIM_BASE_PTR) |= SIM_SOPT2_USBSRC_MASK | SIM_SOPT2_PLLFLLSEL(1);
diff -ruN ./mqx/source/bsp/twrk64f120m/twrk64f120m.h ../MQX/mqx/source/bsp/twrk64f120m/twrk64f120m.h
--- ./mqx/source/bsp/twrk64f120m/twrk64f120m.h	2014-08-20 07:39:44.000000000 -0400
+++ ../MQX/mqx/source/bsp/twrk64f120m/twrk64f120m.h	2020-08-28 16:39:20.524000000 -0400
@@ -72,8 +72,8 @@
 
 /* Uncached area is maped to sram */
 #define __UNCACHED_DATA_START_DEF   0x1FFF0000
-#define __UNCACHED_DATA_SIZE_DEF    0x00020000
-#define __UNCACHED_DATA_END_DEF     0x2000FFF0
+#define __UNCACHED_DATA_SIZE_DEF    0x00040000
+#define __UNCACHED_DATA_END_DEF     0x2002FFF0
 
 #define __DEFAULT_PROCESSOR_NUMBER 1
 #define __DEFAULT_INTERRUPT_STACK_SIZE 1024
@@ -250,8 +250,6 @@
 #define BSP_HWTIMER2_SOURCE_CLK (CM_CLOCK_SOURCE_LPO)
 #define BSP_HWTIMER2_ID         (0)
 
-#define BSP_HWTIMER_LPT0_DEFAULT_PCSCLK     (1)
-
 /* Port IRQ levels */
 #define BSP_PORTA_INT_LEVEL         (3)
 #define BSP_PORTB_INT_LEVEL         (3)
@@ -778,9 +776,11 @@
     #define BSPCFG_ENABLE_II2C2                 0
 #endif
 
-/* GPIO Device - legacy, use LWGPIO instead */
-#ifndef BSPCFG_ENABLE_GPIODEV
-    #define BSPCFG_ENABLE_GPIODEV               0
+/* GPIO device */
+#ifdef BSPCFG_ENABLE_GPIODEV
+    #if BSPCFG_ENABLE_GPIODEV
+        #error The GPIO driver was replaced by faster and smaller LWGPIO - see <MQX_INST_DIR>\mqx\examples\lwgpio\lwgpio.c example application
+    #endif
 #endif
 
 /*
diff -ruN ./mqx/source/io/enet/phy/phy_ksz8081.c ../MQX/mqx/source/io/enet/phy/phy_ksz8081.c
--- ./mqx/source/io/enet/phy/phy_ksz8081.c	2020-08-31 09:58:49.449001000 -0400
+++ ../MQX/mqx/source/io/enet/phy/phy_ksz8081.c	2020-08-28 16:39:20.548000000 -0400
@@ -4,20 +4,21 @@
 #include "bsp_prv.h"
 #include "enet.h"
 #include "enetprv.h"
-#include "phy_ksz8041.h"
+#include "phy_ksz8081.h"
 
-static bool phy_ksz8041_discover_addr(ENET_CONTEXT_STRUCT_PTR enet_ptr);
-static bool phy_ksz8041_init(ENET_CONTEXT_STRUCT_PTR enet_ptr);
-static uint32_t phy_ksz8041_get_speed(ENET_CONTEXT_STRUCT_PTR enet_ptr);
-static bool phy_ksz8041_get_link_status(ENET_CONTEXT_STRUCT_PTR enet_ptr);
-
-const ENET_PHY_IF_STRUCT phy_ksz8041_IF = {
-  phy_ksz8041_discover_addr,
-  phy_ksz8041_init,
-  phy_ksz8041_get_speed,
-  phy_ksz8041_get_link_status
+static bool phy_ksz8081_discover_addr(ENET_CONTEXT_STRUCT_PTR enet_ptr);
+static bool phy_ksz8081_init(ENET_CONTEXT_STRUCT_PTR enet_ptr);
+static uint32_t phy_ksz8081_get_speed(ENET_CONTEXT_STRUCT_PTR enet_ptr);
+static bool phy_ksz8081_get_link_status(ENET_CONTEXT_STRUCT_PTR enet_ptr);
+
+const ENET_PHY_IF_STRUCT phy_ksz8081_IF = {
+  phy_ksz8081_discover_addr,
+  phy_ksz8081_init,
+  phy_ksz8081_get_speed,
+  phy_ksz8081_get_link_status
 };
   
+volatile uint32_t errorCount = 0;
   
 
 /*FUNCTION*-------------------------------------------------------------
@@ -29,15 +30,13 @@
 *
 *END*-----------------------------------------------------------------*/
 
-static bool phy_ksz8041_discover_addr
-   (
-       ENET_CONTEXT_STRUCT_PTR     enet_ptr
-   )
+static bool phy_ksz8081_discover_addr(ENET_CONTEXT_STRUCT_PTR enet_ptr)
 { 
-   uint32_t              i;
-   uint32_t              id;
+   uint32_t  i;
+   uint32_t  id;
 
-   for (i = 0; i < 32; i++) {
+   for (i = 0; i < 32; i++)
+   {
       id = 0;
       enet_ptr->PHY_ADDRESS = i;
       if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_PHYIR1, &id, MII_TIMEOUT)) 
@@ -55,35 +54,50 @@
 
 /*FUNCTION*-------------------------------------------------------------
 *
-*  Function Name  : phy_ksz8041_init
-*  Returned Value : bool
+*  Function Name  : phy_ksz8081_init
+*  Returned Value : boolean
 *  Comments       :
 *    Wait for PHY to automatically negotiate its configuration
 *
 *END*-----------------------------------------------------------------*/
 
-static bool phy_ksz8041_init
-   (
-       ENET_CONTEXT_STRUCT_PTR     enet_ptr
-   )
+static bool phy_ksz8081_init(ENET_CONTEXT_STRUCT_PTR enet_ptr)
 { 
    uint32_t              phy_status=0;
 
-   if (enet_ptr->PARAM_PTR->OPTIONS & ENET_OPTION_PHY_LOOPBACK) {
-      if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_CR, &phy_status, MII_TIMEOUT)) {
+   // tell the phy that we're using 50MHz clocks.
+   if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_PHYC2, &phy_status, MII_TIMEOUT))
+   {
+      phy_status |= PHY_MII_REG_PHY2_RMII_REFERENCE_CLOCK_SELECT;
+      (*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_WRITE)(enet_ptr, PHY_MII_REG_PHYC2, phy_status, MII_TIMEOUT);
+   }
+
+   if (enet_ptr->PARAM_PTR->OPTIONS & ENET_OPTION_PHY_LOOPBACK)
+   {
+      if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_CR, &phy_status, MII_TIMEOUT))
+      {
          phy_status |= PHY_MII_REG_CR_LOOP;
          (*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_WRITE)(enet_ptr, PHY_MII_REG_CR, phy_status, MII_TIMEOUT);
          return TRUE;
       }
-   } else {
-      if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_SR, &phy_status, MII_TIMEOUT)) {
-         if (phy_status & PHY_MII_REG_SR_AN_ABLE) { 
+   }
+   else
+   {
+      if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_SR, &phy_status, MII_TIMEOUT))
+      {
+         if (phy_status & PHY_MII_REG_SR_AN_ABLE)
+         { 
             // Has auto-negotiate ability
             int i;
-            for (i = 0; i < 3 * BSP_ALARM_FREQUENCY; i++) {
-               if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_SR, &phy_status, MII_TIMEOUT)) 
-                  if ((phy_status & PHY_MII_REG_SR_AN_COMPLETE) != 0) 
+            for (i = 0; i < 3 * BSP_ALARM_FREQUENCY; i++)
+            {
+               if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_SR, &phy_status, MII_TIMEOUT))
+               {
+                  if ((phy_status & PHY_MII_REG_SR_AN_COMPLETE) != 0)
+                  {
                      return TRUE;
+                  }
+               }
                _time_delay(BSP_ALARM_RESOLUTION);
             }  
          }
@@ -96,26 +110,29 @@
 
 /*FUNCTION*-------------------------------------------------------------
 *
-*  Function Name  : phy_ksz8041_get_speed
-*  Returned Value : uint32_t - connection speed
+*  Function Name  : phy_ksz8081_get_speed
+*  Returned Value : uint_32 - connection speed
 *  Comments       :
 *    Determine if connection speed is 10 or 100 Mbit
 *
 *END*-----------------------------------------------------------------*/
 
-static uint32_t phy_ksz8041_get_speed
-   (
-       ENET_CONTEXT_STRUCT_PTR     enet_ptr
-   )
+static uint32_t phy_ksz8081_get_speed(ENET_CONTEXT_STRUCT_PTR enet_ptr)
 { 
    uint32_t speed_status;
 
-   if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_PHYC2, &speed_status, MII_TIMEOUT)) {
-      speed_status &= PHY_MII_REG_PHYC2_OP_MODE_MASK;
+   if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_PHYC1, &speed_status, MII_TIMEOUT))
+   {
+      speed_status &= PHY_MII_REG_PHYC1_OP_MODE_MASK;
   
-      if ((PHY_MII_REG_PHYC2_OP_MODE_10_HD==speed_status) || (PHY_MII_REG_PHYC2_OP_MODE_10_FD==speed_status)) {
+      if ((PHY_MII_REG_PHYC1_OP_MODE_10_HD == speed_status) ||
+          (PHY_MII_REG_PHYC1_OP_MODE_10_FD == speed_status))
+      {
          return 10;
-      } else if ((PHY_MII_REG_PHYC2_OP_MODE_100_HD==speed_status) || (PHY_MII_REG_PHYC2_OP_MODE_100_FD==speed_status)) {
+      }
+      else if ((PHY_MII_REG_PHYC1_OP_MODE_100_HD == speed_status) ||
+               (PHY_MII_REG_PHYC1_OP_MODE_100_FD == speed_status))
+      {
          return 100;
       }
    }
@@ -125,17 +142,14 @@
   
 /*FUNCTION*-------------------------------------------------------------
 *
-*  Function Name  : phy_ksz8041_get_link_status
+*  Function Name  : phy_ksz8081_get_link_status
 *  Returned Value : TRUE if link active, FALSE otherwise
 *  Comments       : 
 *    Get actual link status.
 *
 *END*-----------------------------------------------------------------*/
 
-static bool phy_ksz8041_get_link_status
-   (
-       ENET_CONTEXT_STRUCT_PTR     enet_ptr
-   )
+static bool phy_ksz8081_get_link_status(ENET_CONTEXT_STRUCT_PTR enet_ptr)
 { 
    uint32_t data;
    bool res = FALSE;
@@ -152,7 +166,8 @@
            *  just to show that was transition event from one state to another.
            *  As we need only curent state,  read 2 times and return 
            *  the current/latest state. */
-           if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_SR, &data, MII_TIMEOUT)) {
+           if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_SR, &data, MII_TIMEOUT))
+           {
               if ((*enet_ptr->PARAM_PTR->ENET_IF->MAC_IF->PHY_READ)(enet_ptr, PHY_MII_REG_SR, &data, MII_TIMEOUT))
               {
                  res = ((data & PHY_MII_REG_SR_LINK_STATUS) != 0) ? TRUE : FALSE;
diff -ruN ./mqx/source/io/enet/phy/phy_ksz8081.h ../MQX/mqx/source/io/enet/phy/phy_ksz8081.h
--- ./mqx/source/io/enet/phy/phy_ksz8081.h	2020-08-31 09:58:49.449001000 -0400
+++ ../MQX/mqx/source/io/enet/phy/phy_ksz8081.h	2020-08-28 16:39:20.548000000 -0400
@@ -1,5 +1,5 @@
-#ifndef _phy_ksz8041_h_
-#define _phy_ksz8041_h_ 1
+#ifndef _phy_ksz8081_h_
+#define _phy_ksz8081_h_ 1
 
 #ifdef __cplusplus
 extern "C" {
@@ -44,17 +44,22 @@
 #define PHY_MII_REG_SR_AN_COMPLETE   0x0020 // Auto-negotiate completed
 
 
-// values for PHY_MII_REG_SR2 Status Register
+// values for PHY_MII_REG_PHYC1 Status Register
 
-#define PHY_MII_REG_PHYC2_OP_MODE_MASK    0x001c 
-#define PHY_MII_REG_PHYC2_OP_MODE_AN      0x0000 
-#define PHY_MII_REG_PHYC2_OP_MODE_10_HD   0x0004 
-#define PHY_MII_REG_PHYC2_OP_MODE_100_HD  0x0008 
-#define PHY_MII_REG_PHYC2_OP_MODE_10_FD   0x0014 
-#define PHY_MII_REG_PHYC2_OP_MODE_100_FD  0x0018 
+#define PHY_MII_REG_PHYC1_OP_MODE_MASK    0x0007
+#define PHY_MII_REG_PHYC1_OP_MODE_AN      0x0000 
+#define PHY_MII_REG_PHYC1_OP_MODE_10_HD   0x0001 
+#define PHY_MII_REG_PHYC1_OP_MODE_100_HD  0x0002 
+#define PHY_MII_REG_PHYC1_OP_MODE_10_FD   0x0005 
+#define PHY_MII_REG_PHYC1_OP_MODE_100_FD  0x0006 
 
 
-extern const ENET_PHY_IF_STRUCT phy_ksz8041_IF;
+// values for PHY_MII_REG_PHYC2 Status Register
+
+#define PHY_MII_REG_PHY2_RMII_REFERENCE_CLOCK_SELECT  0x0080
+
+
+extern const ENET_PHY_IF_STRUCT phy_ksz8081_IF;
  
 #define MII_TIMEOUT                     (0x10000)
 
diff -ruN ./mqx/source/io/serial/int/serl_int_kuart.c ../MQX/mqx/source/io/serial/int/serl_int_kuart.c
--- ./mqx/source/io/serial/int/serl_int_kuart.c	2014-08-20 07:37:26.000000000 -0400
+++ ../MQX/mqx/source/io/serial/int/serl_int_kuart.c	2020-08-28 16:39:20.564000000 -0400
@@ -461,6 +461,7 @@
    IO_SERIAL_INT_DEVICE_STRUCT_PTR        int_io_dev_ptr = parameter;
    KUART_INFO_STRUCT_PTR                  sci_info_ptr = int_io_dev_ptr->DEV_INFO_PTR;
    UART_MemMapPtr                         sci_ptr = sci_info_ptr->SCI_PTR;
+   volatile int32_t                        c;
    uint16_t                                stat = sci_ptr->S1;
 
 #if MQX_ENABLE_LOW_POWER
@@ -487,9 +488,13 @@
 
    ++sci_info_ptr->INTERRUPTS;
 
-   if(stat & UART_S1_OR_MASK) {
-      ++sci_info_ptr->RX_OVERRUNS;
-   }
+   if (stat & UART_S1_OR_MASK) {  
+       sci_ptr->CFIFO |= UART_CFIFO_RXFLUSH_MASK;  
+       sci_ptr->PFIFO &= ~UART_PFIFO_RXFE_MASK;  
+       c = sci_ptr->D;  
+       sci_ptr->PFIFO |= UART_PFIFO_RXFE_MASK;  
+       ++sci_info_ptr->RX_OVERRUNS;  
+     }  
    if(stat & UART_S1_PF_MASK) {
       ++sci_info_ptr->RX_PARITY_ERRORS;
    }
@@ -574,9 +579,14 @@
    - _kuart_int_err_isr has lower priority than _kuart_int_rx_tx_isr
    - error interrupts are not enabled
    */
-   if(stat & UART_S1_OR_MASK) {
-      ++sci_info_ptr->RX_OVERRUNS;
-   }
+   if (stat & UART_S1_OR_MASK) {  
+       sci_ptr->CFIFO |= UART_CFIFO_RXFLUSH_MASK;  
+       sci_ptr->PFIFO &= ~UART_PFIFO_RXFE_MASK;  
+       c = sci_ptr->D;  
+       sci_ptr->PFIFO |= UART_PFIFO_RXFE_MASK;  
+       ++sci_info_ptr->RX_OVERRUNS;  
+     }  
+   
    if(stat & UART_S1_PF_MASK) {
       ++sci_info_ptr->RX_PARITY_ERRORS;
    }
diff -ruN ./rtcs/CMakeLists.txt ../MQX/rtcs/CMakeLists.txt
--- ./rtcs/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/rtcs/CMakeLists.txt	2020-08-28 16:39:20.620000000 -0400
@@ -0,0 +1,223 @@
+SET(LIBRARY_NAME rtcs)
+
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/rtcs/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc/kadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/cm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/dma)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/macnet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/phy)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx/freescale)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/can/flexcan)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio/kgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/hwtimer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/common)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/debug)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_mem)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_null)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pipe)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lpm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb/mqxa)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pccard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcflash)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/rtc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/serial)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tchres)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/timer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/cpu)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/tad)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mfs/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/compiler/gcc_arm/)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/arm-none-eabi/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include-fixed)
+
+SET(SOURCES
+   ${MQX_ROOTDIR}/rtcs/source/apps/binfile.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/coff.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/dhcpsrv.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/echosrv.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/eds.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpc.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpc_cmd.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpclnt.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpsrv.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpsrv_cmd.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpsrv_cmd_file.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpsrv_cmd_transfer.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpsrv_msg.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpsrv_supp.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/ftpsrv_task.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/httpsrv.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/httpsrv_supp.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/httpsrv_task.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/loadtb.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/loadtc.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/loadts.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/resolver.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/rtcsload.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/rtcs_base64.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/rtcs_smtp.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/sntp.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/sockio.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/srec32.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/srecord.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/telnet.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/telnetio.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/telnsrv.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/tftp.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/tftpacc.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/tftpsrv.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/tftputil.c
+   ${MQX_ROOTDIR}/rtcs/source/apps/dnscln.c
+   ${MQX_ROOTDIR}/rtcs/source/if/arpcmd.c
+   ${MQX_ROOTDIR}/rtcs/source/if/dnshosts.c
+   ${MQX_ROOTDIR}/rtcs/source/if/dnsinit.c
+   ${MQX_ROOTDIR}/rtcs/source/if/dnsutil.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ghbname.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ifadd.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ifbootp.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ifdhcp.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ifdns.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ifppp.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ifrem.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ifstat.c
+   ${MQX_ROOTDIR}/rtcs/source/if/iftraps.c
+   ${MQX_ROOTDIR}/rtcs/source/if/iftunnel.c
+   ${MQX_ROOTDIR}/rtcs/source/if/inet.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ipcfg.c
+   ${MQX_ROOTDIR}/rtcs/source/if/iwcfg.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ping.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcs.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcscmd.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcsdela.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcsglob.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcshost.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcsinit.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcslog0.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcslog1.c
+   ${MQX_ROOTDIR}/rtcs/source/if/rtcsrand.c
+   ${MQX_ROOTDIR}/rtcs/source/if/sdgram.c
+   ${MQX_ROOTDIR}/rtcs/source/if/sockutil.c
+   ${MQX_ROOTDIR}/rtcs/source/if/soigmp.c
+   ${MQX_ROOTDIR}/rtcs/source/if/soip.c
+   ${MQX_ROOTDIR}/rtcs/source/if/solink.c
+   ${MQX_ROOTDIR}/rtcs/source/if/sosel.c
+   ${MQX_ROOTDIR}/rtcs/source/if/sosock.c
+   ${MQX_ROOTDIR}/rtcs/source/if/sotcp.c
+   ${MQX_ROOTDIR}/rtcs/source/if/soudp.c
+   ${MQX_ROOTDIR}/rtcs/source/if/sstream.c
+   ${MQX_ROOTDIR}/rtcs/source/if/getaddrinfo.c
+   ${MQX_ROOTDIR}/rtcs/source/if/getnameinfo.c
+   ${MQX_ROOTDIR}/rtcs/source/if/inet_ntop.c
+   ${MQX_ROOTDIR}/rtcs/source/if/inet_pton.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ipcfg6.c
+   ${MQX_ROOTDIR}/rtcs/source/if/ping6.c
+   ${MQX_ROOTDIR}/rtcs/source/media/arp.c
+   ${MQX_ROOTDIR}/rtcs/source/media/arpinit.c
+   ${MQX_ROOTDIR}/rtcs/source/media/ipcp.c
+   ${MQX_ROOTDIR}/rtcs/source/media/ipcpfsm.c
+   ${MQX_ROOTDIR}/rtcs/source/media/ip-e.c
+   ${MQX_ROOTDIR}/rtcs/source/media/proxyarp.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/alggen.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/dnat.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/ifdnat.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/ifnat.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/nat.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/nat_apply.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/natalg.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/natdata.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/natevent.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/natftp.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/nattftp.c
+   ${MQX_ROOTDIR}/rtcs/source/nat/sonat.c
+   ${MQX_ROOTDIR}/rtcs/source/os/mqx25x/rtcsdate.c
+   ${MQX_ROOTDIR}/rtcs/source/os/mqx25x/rtcsmsec.c
+   ${MQX_ROOTDIR}/rtcs/source/os/mqx25x/rtcsmsg.c
+   ${MQX_ROOTDIR}/rtcs/source/os/mqx25x/rtcspart.c
+   ${MQX_ROOTDIR}/rtcs/source/os/mqx25x/rtcssec.c
+   ${MQX_ROOTDIR}/rtcs/source/os/mqx25x/rtcstask.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/ccp.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/chap.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/gen16.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/genmd5.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/lcp.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/md5.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/md5step.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/pap.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/pktrx.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/pkttx.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/ppp.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/pppfsm.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/pppglob.c
+   ${MQX_ROOTDIR}/rtcs/source/ppp/ppphdlc.c
+   ${MQX_ROOTDIR}/rtcs/source/snmp/1213.c
+   ${MQX_ROOTDIR}/rtcs/source/snmp/mib.c
+   ${MQX_ROOTDIR}/rtcs/source/snmp/mqxmib.c
+   ${MQX_ROOTDIR}/rtcs/source/snmp/snmp.c
+   ${MQX_ROOTDIR}/rtcs/source/snmp/trap_receivers.c
+   ${MQX_ROOTDIR}/rtcs/source/snmp/traps.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/bootcomm.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/bootinit.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/bootp.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/checksum.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/dhcpclnt.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/dhcputil.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/icmp.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/igmp.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/igmputil.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/ip.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/ip_reasm.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/ipif_add.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/ipif_rem.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/iplocal.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/ipradix.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/iproute.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/iptunnel.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/iputil.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/rip.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/route.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/rtcspcb.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/tcp.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/tcp_buf.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/tcp_clos.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/tcp_rcv.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/tcp_send.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/tcpip.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/ticker.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/timer.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/udp.c
+   ${MQX_ROOTDIR}/rtcs/source/tcpip/checksum6.c)
+
+ADD_LIBRARY(${LIBRARY_NAME} STATIC ${SOURCES})
+
+ADD_CUSTOM_COMMAND(TARGET ${LIBRARY_NAME}
+   POST_BUILD
+   COMMAND ${MQX_ROOTDIR}/rtcs/build/bat/rtcs_twrk64f120m.sh ${MQX_ROOTDIR} ${MQX_ROOTDIR}/lib/twrk64f120m.cmake/debug/rtcs gcc_arm
+   COMMENT "Copying rtcs files")
diff -ruN ./rtcs/source/if/ipcfg.c ../MQX/rtcs/source/if/ipcfg.c
--- ./rtcs/source/if/ipcfg.c	2014-08-20 07:37:30.000000000 -0400
+++ ../MQX/rtcs/source/if/ipcfg.c	2020-08-28 16:39:20.624000000 -0400
@@ -1146,6 +1146,9 @@
 
     DHCP_option_variable (&optptr, &optlen, DHCPOPT_PARAMLIST, parm_options, sizeof (parm_options));
 
+    // Send the LCM's device name to the router
+    DHCP_option_string(&optptr, &optlen, DHCPOPT_HOSTNAME, DHCP_CLIENT_NAME);
+
     error = RTCS_if_bind_DHCP (ipcfg_data[device].ihandle, &options, DHCP_option_array, optptr - DHCP_option_array);
     if (error != RTCS_OK) 
     { 
diff -ruN ./rtcs/source/include/ipcfg.h ../MQX/rtcs/source/include/ipcfg.h
--- ./rtcs/source/include/ipcfg.h	2014-08-20 07:37:32.000000000 -0400
+++ ../MQX/rtcs/source/include/ipcfg.h	2020-08-28 16:39:20.624000000 -0400
@@ -45,6 +45,7 @@
 #define IPCFG_TASK_NAME             "IPCFG_TASK"
 #define IPCFG_TASK_STACK_SIZE       1000
 
+#define DHCP_CLIENT_NAME            "Legrand LC7001"
 
 #define IPCFG_DEVICE_COUNT  BSP_ENET_DEVICE_COUNT
 
diff -ruN ./rtcs/source/include/rtcs_sock.h ../MQX/rtcs/source/include/rtcs_sock.h
--- ./rtcs/source/include/rtcs_sock.h	2014-08-20 07:37:32.000000000 -0400
+++ ../MQX/rtcs/source/include/rtcs_sock.h	2020-08-28 16:39:20.624000000 -0400
@@ -130,7 +130,7 @@
 #define DEFAULT_MAXRTO                 (0)
 #define DEFAULT_MAXRCV_WND             (0)
 #define DEFAULT_KEEPALIVE              (0)
-#define DEFAULT_NO_NAGLE_ALGORITHM     TRUE
+#define DEFAULT_NO_NAGLE_ALGORITHM     FALSE
 #define DEFAULT_NOSWRBUF               FALSE
 #define DEFAULT_CALL_BACK              NULL
 #define DEFAULT_CALLBACK               NULL
diff -ruN ./rtcs/source/include/tcp.h ../MQX/rtcs/source/include/tcp.h
--- ./rtcs/source/include/tcp.h	2014-08-20 07:37:32.000000000 -0400
+++ ../MQX/rtcs/source/include/tcp.h	2020-08-28 16:39:20.624000000 -0400
@@ -286,7 +286,7 @@
  */
 typedef struct tcb_struct {
    struct tcb_struct         *next;             /* TCP server maintained list of TCB's */
-
+   uint32_t  rx_count;         /* Incremented by TCP_Process_data() - ADDED FOR LC7001 */
    uint32_t  SOCKET;           /* Upper layer socket structure */
    uint32_t  VALID;            /* this TCB is valid if = TCB_VALID_ID */
                                                 /* and validly closed if = TCB_INVALID_ID */
diff -ruN ./rtcs/source/include/tcp_prv.h ../MQX/rtcs/source/include/tcp_prv.h
--- ./rtcs/source/include/tcp_prv.h	2014-08-20 07:37:32.000000000 -0400
+++ ../MQX/rtcs/source/include/tcp_prv.h	2020-08-28 16:39:20.624000000 -0400
@@ -72,6 +72,7 @@
 #define TCP_DEFAULT_SBSIZE      4380   /* Default TCB send buffer size */
 #endif
 #ifndef TCP_DEFAULT_RBSIZE
+//#define TCP_DEFAULT_RBSIZE      536   /* Default TCB receive buffer size */
 #define TCP_DEFAULT_RBSIZE      4380   /* Default TCB receive buffer size */
 #endif
 
diff -ruN ./rtcs/source/tcpip/tcp.c ../MQX/rtcs/source/tcpip/tcp.c
--- ./rtcs/source/tcpip/tcp.c	2014-08-20 07:37:32.000000000 -0400
+++ ../MQX/rtcs/source/tcpip/tcp.c	2020-08-28 16:39:20.628000000 -0400
@@ -452,6 +452,7 @@
    */
    coptions = req_ptr->OPTIONS_PTR;
 
+   tcb->rx_count = 0; /* ADDED FOR LC7001 */
    tcb->sndrtomax = 2 * TCP_MSL;
 
    /*
diff -ruN ./rtcs/source/tcpip/tcp_rcv.c ../MQX/rtcs/source/tcpip/tcp_rcv.c
--- ./rtcs/source/tcpip/tcp_rcv.c	2014-08-20 07:37:32.000000000 -0400
+++ ../MQX/rtcs/source/tcpip/tcp_rcv.c	2020-08-28 16:39:20.628000000 -0400
@@ -917,7 +917,7 @@
    uint32_t     mid_status = RTCS_OK;
    uint32_t     use_status = RTCS_OK;
    PCB_FRAGMENT      *pcb_frag_ptr;
-   
+   tcb->rx_count++; /* ADDED FOR LC7001 */
    RTCSLOG_FNE2(RTCSLOG_FN_TCP_Process_data, tcb);
        
    /*
diff -ruN ./shell/CMakeLists.txt ../MQX/shell/CMakeLists.txt
--- ./shell/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/shell/CMakeLists.txt	2020-08-28 16:39:20.628000000 -0400
@@ -0,0 +1,143 @@
+SET(LIBRARY_NAME shell)
+
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/shell/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc/kadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/cm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/dma)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/macnet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/phy)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx/freescale)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/can/flexcan)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio/kgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/hwtimer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/common)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/debug)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_mem)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_null)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pipe)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lpm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb/mqxa)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pccard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcflash)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/rtc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/serial)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tchres)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/timer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/cpu)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/tad)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mfs/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/rtcs/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/classes/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/common/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/include/khci)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/host/khci)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/include/rtos)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/audio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/cdc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/hid)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/hub)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/msd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/msd/mfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/rtos/mqx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/phdc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/printer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/compiler/gcc_arm/)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/arm-none-eabi/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include-fixed)
+
+SET(SOURCES
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_cache.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_cd.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_compare.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_copy.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_create.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_del.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_df.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_di.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_dir.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_dirent.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_disect.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_flush.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_format.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_mkdir.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_pwd.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_read.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_readtest.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_rename.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_rmdir.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_type.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_write.c
+   ${MQX_ROOTDIR}/shell/source/mfs/sh_writetest.c
+   ${MQX_ROOTDIR}/shell/source/mqx/sh_abort.c
+   ${MQX_ROOTDIR}/shell/source/mqx/sh_kill.c
+   ${MQX_ROOTDIR}/shell/source/mqx/sh_pause.c
+   ${MQX_ROOTDIR}/shell/source/mqx/sh_tad.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_arpdisp.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_clock.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_echod.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_eds.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_enet.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_exec.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_ftpc.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_ftpd.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_gate.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_getroute.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_ghbn.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_ipconfig.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_iwconfig.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_load.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_nat.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_nstat.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_ping.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_ppp.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_rtcs.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_sendto.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_smtp.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_snmpd.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_tftp.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_tftpd.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_tnet.c
+   ${MQX_ROOTDIR}/shell/source/rtcs/sh_tnetd.c
+   ${MQX_ROOTDIR}/shell/source/shell/sh_cmdlist.c
+   ${MQX_ROOTDIR}/shell/source/shell/sh_exit.c
+   ${MQX_ROOTDIR}/shell/source/shell/sh_help.c
+   ${MQX_ROOTDIR}/shell/source/shell/sh_sh.c
+   ${MQX_ROOTDIR}/shell/source/shell/sh_util.c
+   ${MQX_ROOTDIR}/shell/source/shell/shell.c)
+
+ADD_LIBRARY(${LIBRARY_NAME} STATIC ${SOURCES})
+
+ADD_CUSTOM_COMMAND(TARGET ${LIBRARY_NAME}
+   POST_BUILD
+   COMMAND ${MQX_ROOTDIR}/shell/build/bat/shell_twrk64f120m.sh ${MQX_ROOTDIR} ${MQX_ROOTDIR}/lib/twrk64f120m.cmake/debug/shell gcc_arm
+   COMMENT "Copying shell files")
diff -ruN ./usb/CMakeLists.txt ../MQX/usb/CMakeLists.txt
--- ./usb/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/usb/CMakeLists.txt	2020-08-28 16:39:20.632000000 -0400
@@ -0,0 +1,2 @@
+ADD_SUBDIRECTORY(device)
+ADD_SUBDIRECTORY(host)
diff -ruN ./usb/device/CMakeLists.txt ../MQX/usb/device/CMakeLists.txt
--- ./usb/device/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/usb/device/CMakeLists.txt	2020-08-28 16:39:20.632000000 -0400
@@ -0,0 +1,91 @@
+SET(LIBRARY_NAME usbd)
+
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/classes/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/common/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/include/khci)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/host/khci)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/device/source/include/rtos)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc/kadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/cm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/dma)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/macnet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/phy)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx/freescale)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/can/flexcan)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio/kgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/hwtimer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/common)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/debug)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_mem)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_null)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pipe)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lpm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb/mqxa)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pccard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcflash)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/rtc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/serial)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tchres)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/timer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/cpu)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/tad)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/compiler/gcc_arm/)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/arm-none-eabi/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include-fixed)
+
+SET(SOURCES
+   ${MQX_ROOTDIR}/usb/device/source/classes/audio/usb_audio.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/cdc/usb_cdc.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/cdc/usb_cdc_pstn.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/common/usb_class.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/common/usb_framework.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/hid/usb_hid.c
+   ${MQX_ROOTDIR}/usb/device/source/device/khci/callback_khci.c
+   ${MQX_ROOTDIR}/usb/device/source/device/khci/khci_dev_main.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/msd/usb_msc.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/msd/usb_msc_scsi.c
+   ${MQX_ROOTDIR}/usb/device/source/classes/phdc/usb_phdc.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_cncl.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_ep_deinit.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_main.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_recv.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_send.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_shut.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_utl.c
+   ${MQX_ROOTDIR}/usb/device/source/device/dev_main.c)
+
+ADD_LIBRARY(${LIBRARY_NAME} STATIC ${SOURCES})
+
+ADD_CUSTOM_COMMAND(TARGET ${LIBRARY_NAME}
+   POST_BUILD
+   COMMAND ${MQX_ROOTDIR}/usb/device/build/bat/usbd_twrk64f120m.sh ${MQX_ROOTDIR} ${MQX_ROOTDIR}/lib/twrk64f120m.cmake/debug/usb gcc_arm
+   COMMENT "Copying usb device files")
diff -ruN ./usb/host/CMakeLists.txt ../MQX/usb/host/CMakeLists.txt
--- ./usb/host/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ ../MQX/usb/host/CMakeLists.txt	2020-08-28 16:39:20.640000000 -0400
@@ -0,0 +1,104 @@
+SET(LIBRARY_NAME usbh)
+
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/audio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/cdc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/common/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/hid)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/hub)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/host/khci)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/msd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/msd/mfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/rtos/mqx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/phdc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/usb/host/source/classes/printer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc/kadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/adc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/cm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/dma)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/macnet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet/phy)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/enet)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx/freescale)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/flashx)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/can/flexcan)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio/kgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/gpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/hwtimer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/i2c/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/bsp/twrk64f120m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/config/common)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/debug)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_mem)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/io_null)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pipe)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lpm)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwadc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/lwgpio)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcb/mqxa)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pccard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/pcflash)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/rtc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sai/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_esdhc)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard/sdcard_spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/sdcard)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/serial)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/spi)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tchres)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/tfs)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/timer)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/polled)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/io/usb_dcd/int)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/cpu)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/core/M4)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/tad)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mfs/source/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/mqx/source/psp/cortex_m/compiler/gcc_arm/)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/arm-none-eabi/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include)
+INCLUDE_DIRECTORIES(${MQX_ROOTDIR}/../tools/toolchain/lib/gcc/arm-none-eabi/4.9.3/include-fixed)
+
+SET(SOURCES
+   ${MQX_ROOTDIR}/usb/host/source/classes/audio/usb_host_audio.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/audio/usb_host_audio_intf.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/cdc/usb_host_cdc.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/cdc/usb_host_cdc_intf.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/hid/usb_host_hid.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/hub/usb_host_hub.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/hub/usb_host_hub_sm.c
+   ${MQX_ROOTDIR}/usb/host/source/host/khci/khci.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/msd/usb_host_msd_bo.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/msd/usb_host_msd_queue.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/msd/usb_host_msd_ufi.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/msd/mfs/usbmfs.c
+   ${MQX_ROOTDIR}/usb/host/source/rtos/mqx/mqx_dll.c
+   ${MQX_ROOTDIR}/usb/host/source/rtos/mqx/usb_mqx.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/phdc/usb_host_phdc.c
+   ${MQX_ROOTDIR}/usb/host/source/classes/printer/usb_host_printer.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_ch9.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_close.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_cnl.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_common.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_dev_list.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_main.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_rcv.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_shut.c
+   ${MQX_ROOTDIR}/usb/host/source/host/host_snd.c)
+
+ADD_LIBRARY(${LIBRARY_NAME} STATIC ${SOURCES})
+
+ADD_CUSTOM_COMMAND(TARGET ${LIBRARY_NAME}
+   POST_BUILD
+   COMMAND ${MQX_ROOTDIR}/usb/host/build/bat/usbh_twrk64f120m.sh ${MQX_ROOTDIR} ${MQX_ROOTDIR}/lib/twrk64f120m.cmake/debug/usb gcc_arm
+   COMMENT "Copying usb host files")
